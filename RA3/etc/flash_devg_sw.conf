# A configuration file can include other files by using an include directive.
# include file-name

trusted_player = true
# Flash DLL to use based on display (colour depth) setting
dll =                    flashlite-8888.so
#dll =                    flashlite-565.so
#dll =                    flashlite-vg.so

# The hmip-compmgr.so extension must be used (and the flashlite-vg.so used for
# the dll setting to use OpenVG instead of software rendering).  This will work
# only on supported platforms.
#extension {
#   dll = hmip-openvg.so
#   config {
#      format = 8888
#   }
#}

# Use this extension instead of hmip-photon.so for operation with the
# Composition Manager.
extension {
    dll = hmip-compmgr.so
    config {
    # If true, player registers itself with Composition Manager as a
    # delegate allowing ActionScript code to control the locations and
    # visibility of other application windows.
    window_manager = true
    # The name of the class to use for the player's window.
    winmgr_class = Flash
    layer = 2
    }
}

# Default width and height of the Flash player.
width = 480
height = 240

# declared_width  = 400
# declared_height = 480

# stage_width = 1
# stage_height = 3

enable_blitting = true

######### Proxy Server Configuration ##########
#http_proxy=10.16.11.19
#http_proxy_port=8080

# Where to send the output of ActionScript trace calls.  This may either
# be the name of a file (in which case it is overwritten), or it can be a number
# indicating that the output should be sent to the specified file descriptor
# (e.g. 1 = standard output, 2 = standard error).
trace_file = 1

# Where to send log output.  As for trace_file this may be the name of a file,
# or it may be a file descriptor number.  Alternatively, this may be either
# 'slogger' to send the output to the system logger or 'syslogd' to send the
# output to syslogd.
log = 1
#log = syslogd
#log = slogger

# log_mask is a regular expression that controls what messages are logged.
# Each log_mask string is a regular expression possibly prefixed with an
# exclamation mark ('!').  Each log message (strictly speaking the format
# string used to generate the log message) is matched against the log_mask
# expressions in order, if a message matches, logging is enabled if the
# expression was not preceded by a !, or disabled if it is.
# All log messages have 'emerg', 'err', 'warning', 'info' or 'debug' at the
# beginning to indicate their severity.  By default all messages are logged.
# Disable all debug messages
log_mask = !^(debug)
#log_mask = trace
#log_mask = !^(info)
#log_mask = actionscript
#log_mask = render
#log_mask = fps
#log_mask = url
#log_mask = mme
fps_report_period = 5

# Uncomment line below to get time stamps
#time_format = *

# Size of static memory pool in bytes (default 512k)
static_mempoolsize = 524288

# Size of the dynamic memory pool in bytes 80Mbytes (bloxorz game needs over
# 70M)
dynamic_mempoolsize = 83886080

language = en-US
#language = CN

# Path to directory to store files for mobile shared objects (used by Flash
# applications to store persistent data).  This directory should generally be
# used only for this purpose as the total size of files in this directory is
# monitored.
#mso_path = /tmpdir/flmso
mso_path = /tmp

# Maximum allowed space for the mobile shared objects of a single swf file
mso_max_movie = 8192

# Maximum allowed space for all mobile shared objects
mso_max = 65536

# Path for swf files that should be considered to be trusted; all files in or
# below this path are trusted.  These files are able to access both local files
# and the network.  Trusting the wrong files can lead to private data being
# compromised.
local_trusted = /

# Name of file containing ActionScript classes to load.  This may be specified
# more than once.
#preload_actionscript =

img_codec {
    dll=img_codec_jpg.so
    mime=image/jpeg:image/jpg
}
img_codec {
    dll=img_codec_png.so
    mime=image/png
}
img_codec {
    dll=img_codec_bmp.so
    mime=image/bmp
}
img_codec {
    dll=img_codec_gif.so
    mime=image/gif
}
img_codec {
    dll=img_codec_sgi.so
    mime=image/sgi
}
img_codec {
    dll=img_codec_tga.so
    mime=image/tga
}

# Encoding can be one of: Latin1, Latin2, Latin4, Cyrillic, Arabic, Greek,
# Hebrew, Turkish, Thai, Big5, GBK, ShiftJIS or KoreanUHC
encoding = Latin1


# flash-* picks a charset table from /usr/photon/translations to translate
# Flash 1.1 strings to Unicode based on the encoding setting.  While it picks
# the best translation table from amongst the ones that ship with Neutrino,
# in some cases there is not an exact match.  To resolve this problem it is
# possible to override the charset table flash-* picks and supply one of your
# own that is an exact match.
#charset =

# Overrides the default four way navigation, enabling navigation with the Tab key
# With current Flashlite DLL, setting this to true will completely disable
# navigation functions (which is what we want)
two_way_navigation = true

# Flips (and applies some scaling to) the x and y mouse coordinates,
# and rotates the cursor (by +90 degrees)
rotate_mouse = false

#  Draws the cursor in software (flash-gf only)
soft_cursor = false

# Control cursor shape behaviour with this option
#  - dynamic - the cursor will be shown with a shape that corresponds to the type of
#              Flash content under it (arrow, hand or text i-beam)
#  - touch - the cursor will be shown as a small red square
#  - none - no cursor is shown
cursor_shape = dynamic

# Displays a rectangle around the last updated area (the last dirty rectangle)
dirty_rect = false

# Flash rendering quality.  This can range from 0 (low) to 2 (high)
quality = 2

# If true, enable use of background alpha blending
background_alpha = true

# If using alpha to blend layers, uncomment this so that the ActionScript
# knows that.
#info {
#    name = alpha_blend_layers
#}

info {
#        name = selectExclusion
#        value = Home.Call; Home.Listen.AM Radio; Home.Listen.FM Radio; Home.Listen.Sat Radio; Home.Browse.Internet; Home.Watch.Video Files;
#        
#        # uncomment this, If you want to see if blitting is in use
#        # name = blitvisible
         name = blitvisible
}

# To extend Flash, one can include extra DLLs that provide support for
# the fscommand2 function as well as implement ActionScript classes in
# C/C++.  To do this, you register your DLL here along with whatever
# configuration file it should use.

#extension {
#    dll = libModeManagerExtDll.so
#}
#extension {
#    dll = libVoiceManagerExtDll.so
#}
#extension {
#    dll = libMediaManagerExtDll.so
#}
#extension {
#    dll = libTunerManagerExtDll.so
#}
#extension {
#    dll = libPhoneManagerExtDll.so
#}
#extension {
#    dll = libNavigationManagerExtDll.so
#}
#extension {
#    dll = libAmpManagerExtDll.so
#}
#extension {
#    dll = libPandoraManagerExtDll.so
#}

#extension {
#   dll = hmip-gf.so
#   config {
#       input_delay = 2
#       layer_no = 0
#       #chroma_color = 0xff00ff
#   }
#}
extension {
    dll = libIpcExtDLL.so
}

#extension {
#    dll = libCurlExtDll.so
#}

#extension {
#    dll = ase-pps.so
#}

#extension {
#    dll = libTraceExtDLL.so
#   config {
#       process_name = HMI
#       auto_start = 1
#	   persist = 1
#       add_scopes_after_start = 1
#	   binary_persistence_file_name = /fs/etfs/tmp/tracelog/traces.log
#	   text_persistence_file_name = /fs/etfs/tracescopes/links/HMI.hbtc
#       trace_list_name = /fs/etfs/usr/share/flash/scopes/scopelist       
#   }
#}

# Name of swf file containing Flash vector fonts that should be used instead
# of device fonts. This can be specified more than once.
#embedded_font_file = /etc/system/config/vfontdata.swf

# If true, device fonts are antialised giving better quality at some cost in
# performance.
antialias_fonts = true

# Path to font files
font_path = /usr/photon/font_repository

# Names and files containing fonts used for device text.  Non-absolute paths
# are relative to font_path.  A font can also indicate a different font should
# be substituted by using the 'use' setting.  If device text is drawn with
# an unknown font, the first configured font that specifies a font file will
# be substituted.
#font {
#     name=Titula
#     file=Titula_080814.ttf
#}

# Number of fonts that can be cached before unused ones will be unloaded.
# If this is too low there will be a performance impact as fonts are continually
# loaded and unloaded.  If too high, memory may be wasted by keeping fonts
# that are rarely used.
max_cached_fonts = 3

# Sound output sample rate.  May be 44100, 32000, 22050, 16000, 11025,
# 8000 or 5512
sound_sample_rate = 44100

# Number of sound channels, 2 for stereo, 1 for mono.
sound_channels = 2

# May be 8 or 16.  If 8, Flash's sound mixer does not operate.
sound_sample_size = 16

#sound_frags =
sound_frags = 24

# Determines the number of 8k sound buffers flash-* can use.  A large number
# means a large amount of sound data can be queued up to be played, reducing the
# likelihood of sound problems from the audio device running out of data to
# play (buffer underrun).  A large number however also increases memory usage.
sound_buffers = 64

# Index of sound card to open or -1 to use preferred
sound_card = -1

#sound_device =

# If true, exit player when fscommand2("Quit") is called.  By default player
# ignores this call.  Mozilla plug-in always ignores the call.
fscommand2_quit = true

# If true, threads are given names to make them easier to track in log messages
# and various tools.
thread_names = true

# Mapping of key ids to names of keys. These names are the strings that
# Key.getCode() will return in a onKeyDown or onKeyUp event handler when the
# corresponding key is pressed or released.
# To get the value of the soft keys, ExtendedKey.SOFT1 to ExtendedKey.SOFT11
# use the strings soft1 to soft11.
key {
    name = MIDDLEMOUSE
    id = 0
}
key {
    name = RIGHTMOUSE
    id = 1
}

# Key ids associated with middle and right mouse buttons.  The default value
# (-1) results in no event being generated.
middle_mouse_id = 0
right_mouse_id = 1


# Configuration settings that affect what capabilities flash-* reports
# having.  Note that changing these do not add (or remove) support for these
# features, only what is claimed to be supported.
capabilities {
    has_mms = false
    has_sms = false
    has_email = false
    has_mouse = true
    has_stylus = false
    has_mappable_soft_keys = false
    soft_key_count = 0
}

# Video codec dll to be loaded based on video type.
# NOTE: video IDs are enumerated by Adobe
#   Sorenson == 2
#   On2      == 4
videodll {
    id = 2
    #dll = flashviddec_sorenson.so
    dll = flashviddec_sorenson-v6.so
}

videodll {
    id = 4
    #dll = flashviddec_on2.so
    dll = flashviddec_on2-v6.so
}

# Block gfi input events from other layers.  Rely on explicit forwarding
# by flash-gf in transparent areas of screen.

#opaque_pointer = true
# Keep DNS entries cached for 24hrs
dns_cache_life = 86400

# If worst comes to worst, delay url fetchs by 100ms to avoid hanging io-pck
#dns_delay = 100

# Other configuration affecting flash-*
# /usr/photon/translations/charsets (or $PHOTON_PATH/translations/charsets)
# requires entries appropriate for the encoding setting (above) and the
# .tab file associated with the encoding must also be present.
# The charsets file must contain configuration settings for UTF-16LE or
# UTF-16BE which are not present by default in the 632 release.
